!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=10)}([function(e,t,n){"use strict";var r,o,i,s=n(3),u="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-";function c(){i=!1}function a(e){if(e){if(e!==r){if(e.length!==u.length)throw new Error("Custom alphabet for shortid must be "+u.length+" unique characters. You submitted "+e.length+" characters: "+e);var t=e.split("").filter((function(e,t,n){return t!==n.lastIndexOf(e)}));if(t.length)throw new Error("Custom alphabet for shortid must be "+u.length+" unique characters. These characters were not unique: "+t.join(", "));r=e,c()}}else r!==u&&(r=u,c())}function f(){return i||(i=function(){r||a(u);for(var e,t=r.split(""),n=[],o=s.nextValue();t.length>0;)o=s.nextValue(),e=Math.floor(o*t.length),n.push(t.splice(e,1)[0]);return n.join("")}())}e.exports={get:function(){return r||u},characters:function(e){return a(e),r},seed:function(e){s.seed(e),o!==e&&(c(),o=e)},lookup:function(e){return f()[e]},shuffled:f}},function(e,t,n){"use strict";e.exports=n(2)},function(e,t,n){"use strict";var r=n(0),o=n(4),i=n(8),s=n(9)||0;function u(){return o(s)}e.exports=u,e.exports.generate=u,e.exports.seed=function(t){return r.seed(t),e.exports},e.exports.worker=function(t){return s=t,e.exports},e.exports.characters=function(e){return void 0!==e&&r.characters(e),r.shuffled()},e.exports.isValid=i},function(e,t,n){"use strict";var r=1;e.exports={nextValue:function(){return(r=(9301*r+49297)%233280)/233280},seed:function(e){r=e}}},function(e,t,n){"use strict";var r,o,i=n(5);n(0);e.exports=function(e){var t="",n=Math.floor(.001*(Date.now()-1567752802062));return n===o?r++:(r=0,o=n),t+=i(7),t+=i(e),r>0&&(t+=i(r)),t+=i(n)}},function(e,t,n){"use strict";var r=n(0),o=n(6),i=n(7);e.exports=function(e){for(var t,n=0,s="";!t;)s+=i(o,r.get(),1),t=e<Math.pow(16,n+1),n++;return s}},function(e,t,n){"use strict";var r,o="object"==typeof window&&(window.crypto||window.msCrypto);r=o&&o.getRandomValues?function(e){return o.getRandomValues(new Uint8Array(e))}:function(e){for(var t=[],n=0;n<e;n++)t.push(Math.floor(256*Math.random()));return t},e.exports=r},function(e,t){e.exports=function(e,t,n){for(var r=(2<<Math.log(t.length-1)/Math.LN2)-1,o=-~(1.6*r*n/t.length),i="";;)for(var s=e(o),u=o;u--;)if((i+=t[s[u]&r]||"").length===+n)return i}},function(e,t,n){"use strict";var r=n(0);e.exports=function(e){return!(!e||"string"!=typeof e||e.length<6)&&!new RegExp("[^"+r.get().replace(/[|\\{}()[\]^$+*?.-]/g,"\\$&")+"]").test(e)}},function(e,t,n){"use strict";e.exports=0},function(e,t,n){"use strict";n.r(t);var r,o=function(){function e(e,t){this.id=e,this.name=t,this.devices=[]}return e.prototype.getId=function(){return this.id},e.prototype.getName=function(){return this.name},e.prototype.getDevices=function(){return this.devices},e.prototype.selectDevice=function(e){return this.devices.find((function(t){return t.getId()===e}))},e.prototype.addDevice=function(e){this.devices.push(e)},e.prototype.deleteDevice=function(e){this.devices=this.devices.filter((function(t){return t.getId()!==e}))},e.prototype.enableAllDevuces=function(){this.devices.forEach((function(e){return e.enable()}))},e.prototype.disableAllDevices=function(){this.devices.forEach((function(e){return e.disable()}))},e.prototype.delayAction=function(e,t){var n=this;return new Promise((function(r){setTimeout((function(){r(n.selectDevice(e))}),t)}))},e}(),i=function(){function e(e,t,n){this.min=e,this.max=t,this.value=n}return e.prototype.getMin=function(){return this.min},e.prototype.getMax=function(){return this.max},e.prototype.getValue=function(){return this.value},e.prototype.setValue=function(e){e<this.min||e>this.max||(this.value=e)},e.prototype.increase=function(e){if(!(e<=0)){var t=this.value+e;t>this.max?this.value=this.max:this.value=t}},e.prototype.decrease=function(e){if(!(e<=0)){var t=this.value-e;t<this.min?this.value=this.min:this.value=t}},e}(),s=function(){function e(e,t,n){this.red=e,this.green=t,this.blue=n}return e.prototype.getRed=function(){return this.red.getValue()},e.prototype.getGreen=function(){return this.green.getValue()},e.prototype.getBlue=function(){return this.blue.getValue()},e.prototype.setRed=function(e){this.red.setValue(e)},e.prototype.setGreen=function(e){this.green.setValue(e)},e.prototype.setBlue=function(e){this.blue.setValue(e)},e.prototype.increaseRed=function(e){this.red.increase(e)},e.prototype.decreaseRed=function(e){this.red.decrease(e)},e.prototype.increaseGreen=function(e){this.green.increase(e)},e.prototype.decreaseGreen=function(e){this.green.decrease(e)},e.prototype.increaseBlue=function(e){this.blue.increase(e)},e.prototype.decreaseBlue=function(e){this.blue.decrease(e)},e}(),u=function(){function e(e,t){this.id=e,this.name=t,this.state=!1}return e.prototype.getId=function(){return this.id},e.prototype.getState=function(){return this.state},e.prototype.getName=function(){return this.name},e.prototype.setName=function(e){this.name=e},e.prototype.toggleState=function(){this.state=!this.state},e.prototype.disable=function(){this.state=!1},e.prototype.enable=function(){this.state=!0},e}(),c=(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),a=function(e){function t(t,n,r,o,i,s){var u=e.call(this,t,n)||this;return u.screenDiagonal=r,u.volume=o,u.saturation=i,u.brightness=s,u}return c(t,e),t.prototype.getScreenDiagonal=function(){return this.screenDiagonal},t.prototype.getVolume=function(){return this.volume.getValue()},t.prototype.getSaturation=function(){return this.saturation.getValue()},t.prototype.getBrightness=function(){return this.brightness.getValue()},t.prototype.setVolume=function(e){this.volume.setValue(e)},t.prototype.setSaturation=function(e){this.saturation.setValue(e)},t.prototype.setBrightness=function(e){this.brightness.setValue(e)},t.prototype.increaseVolume=function(e){this.volume.increase(e)},t.prototype.decreaseVolume=function(e){this.volume.decrease(e)},t.prototype.increaseSaturation=function(e){this.saturation.increase(e)},t.prototype.decreaseSaturation=function(e){this.saturation.decrease(e)},t.prototype.increaseBrightness=function(e){this.brightness.increase(e)},t.prototype.decreaseBrightness=function(e){this.brightness.decrease(e)},t}(u),f=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),p=function(e){function t(t,n,r,o){var i=e.call(this,t,n)||this;return i.brightness=r,i.color=o,i}return f(t,e),t.prototype.getBrightness=function(){return this.brightness.getValue()},t.prototype.getRed=function(){return this.color.getRed()},t.prototype.getGreen=function(){return this.color.getGreen()},t.prototype.getBlue=function(){return this.color.getBlue()},t.prototype.setBrightness=function(e){this.brightness.setValue(e)},t.prototype.setRed=function(e){this.color.setRed(e)},t.prototype.setGreen=function(e){this.color.setGreen(e)},t.prototype.setBlue=function(e){this.color.setBlue(e)},t.prototype.increaseBrightness=function(e){this.brightness.increase(e)},t.prototype.decreaseBrightness=function(e){this.brightness.decrease(e)},t.prototype.increaseRed=function(e){this.color.increaseRed(e)},t.prototype.decreaseRed=function(e){this.color.decreaseRed(e)},t.prototype.increaseGreen=function(e){this.color.increaseGreen(e)},t.prototype.decreaseGreen=function(e){this.color.decreaseGreen(e)},t.prototype.increaseBlue=function(e){this.color.increaseBlue(e)},t.prototype.decreaseBlue=function(e){this.color.decreaseBlue(e)},t}(u),l=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{c(r.next(e))}catch(e){i(e)}}function u(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,u)}c((r=r.apply(e,t||[])).next())}))},h=function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},d=n(1),y=new o(d.generate(),"Cool house"),g=new i(0,100,50),v=new i(0,100,50),b=new i(0,100,100),m=new i(0,100,100),w=new s(new i(0,255,255),new i(0,255,255),new i(0,255,255)),x=d.generate(),V=new a(x,"LG",35,g,v,b),B=d.generate(),_=new p(B,"RGB-Lamp-143",m,w);y.addDevice(V),y.addDevice(_);var R=y.selectDevice(x);R.enable(),R.setVolume(73),R.decreaseBrightness(18),R.increaseSaturation(999),R.toggleState(),console.log(R);var G=y.selectDevice(B);G.decreaseBrightness(841250),G.setBlue(500),G.decreaseGreen(-150),G.setRed(177),console.log("before promise"),console.log(G),y.delayAction(B,2e3).then((function(e){return e.enable(),e})).then(console.log);var O,S;O=B,S=4e3,l(void 0,void 0,void 0,(function(){var e;return h(this,(function(t){switch(t.label){case 0:return[4,y.delayAction(O,S).then((function(e){return e.disable(),e}))];case 1:return e=t.sent(),console.log("device was disabled"),console.log(e),[2,e]}}))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,